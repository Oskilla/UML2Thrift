-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @path IDL=/uml2idl/metamodel/model/idl.ecore
-- Transforms UML Interfaces into Thrift services

module uml2thrift;
create OUT : IDL from IN : UML;

rule Model2IDLModel {
	from
		m1 : UML!Model
	to
		m2 : IDL!IDLModel (
				name <- m1.name,
				services <- m1.ownedElement->select(element | element.oclIsKindOf(UML!Interface))->collect(e | thisModule.Interface2Service(e)),
				structures <- m1.ownedElement->select(element | element.oclIsKindOf(UML!DataType))->collect(e | thisModule.DataType2Structure(e))
			)
} 
lazy rule Interface2Service{
	from
		interface1 : UML!Interface
	to
		service2 : IDL!Service(
				name <- interface1.name,
				function <- interface1.ownedOperation->select(element | element.oclIsKindOf(UML!Operation))->collect(e | thisModule.Operation2Function(e))
			)
}
lazy rule Operation2Function{
	from
		operation1 : UML!Operation
	to
		function2 : IDL!Function(
				name <- operation1.name,
				fieldfunction <- operation1.ownedParameter->select(element | element.oclIsKindOf(UML!Parameter))->collect(e | thisModule.Parameter2FieldFunction(e))
		)
}
lazy rule Parameter2FieldFunction{
	from
		parameter1 : UML!Parameter
	to
		fieldfunction2 : IDL!FieldFunction(
				name <- parameter1.name,
				field <- parameter1.type
		)
}
lazy rule DataType2Structure{
	from
		datatype1 : UML!DataType
	to
		structure2 : IDL!Structure(
				name <- datatype1.name,
				fieldstruct <- datatype1.ownedAttribute->select(element | element.oclIsKindOf(UML!Property))->collect(e | thisModule.Property2FieldStruct(e)) 
			)
}

lazy rule Property2FieldStruct{
	from
		property1 : UML!Property
	to
		fieldstruct2 : IDL!FieldStruct(
			name <- property1.name
		)
	}

lazy rule Type2Field{
	

}

